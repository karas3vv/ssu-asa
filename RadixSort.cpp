#include <iostream>
#include <vector>
#include <algorithm>
#include <cmath>

using namespace std;

// функция для определения максимального кол-ва разрядов в числах вектора
int k(vector<int>& vec) {
    int retK = 0; // переменная для хранения максимального кол-ва разрядов
    
    // перебираем все числа в векторе
    for (int n : vec) {
        int cnt; // счетчик разрядов текущего числа
        
        // особый случай для числа 0 (у него 1 разряд)
        if (n == 0){
            cnt = 1;
        } else {
            cnt = 0;
        }
        
        // считаем кол-во разрядов в числе
        while (n != 0) {
            n /= 10; // удаляем младший разряд
            cnt++;
        }
        
        // обновляем максимальное кол-во разрядов, если текущее число имеет больше разрядов
        if (cnt > retK) {
            retK = cnt;
        }
    }
    return retK;
}

// функция поразрядной сортировки (LSD - Least Significant Digit)
void radixSort(std::vector<int>& vec) {
    int dig = k(vec); // получаем максимальное кол-во разрядов
    vector<vector<int> > p(10); // вектор векторов для цифр от 0 до 9
    
    // проходим по всем разрядам, начиная с младшего
    for (int i = 0; i < dig; i++) {
        // распределяем числа по корзинам в соответствии с текущей цифрой
        for (int j = 0; j < vec.size(); j++) {
            // вычисляем текущую цифру (i-й разряд числа)
            int dig_cnt = (abs(vec[j]) / static_cast<int>(pow(10,i)) % 10);
            p[dig_cnt].push_back(vec[j]); // помещаем число в соответствующую корзину
        }
        
        // собираем числа из корзин обратно в исходный вектор
        int ind = 0; // индекс для вставки в исходный вектор
        for (int i = 0; i < 10; i++) {
            for (int n : p[i]) {
                vec[ind++] = n; // последовательно берем числа из всех корзин
            }
            p[i].clear(); // очищаем корзину для следующего разряда
        }
    }
}

int main() {
    int n;
    cout << "Введите N: (задание 2): ";
    cin >> n; 
    
    vector<int> arr(n);
    
    for (int i = 0; i < n; i++) {
        cout << i + 1 << ": ";
        cin >> arr[i];
    }
    
    // сортируем вектор с помощью поразрядной сортировки
    radixSort(arr);
    
    // выводим отсортированный вектор
    cout << "Отсортированный массив методом поразрядной сортировки:\n ";
    for (int i = 0; i < n; i++) {
        cout << arr[i] << ' ';
    }
    
    return 0;
}