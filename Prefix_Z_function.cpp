#include <iostream>
#include <vector>  
#include <string>

using namespace std;

// функция для вычисления префикс-функции строки
vector<int> prefix_function(string s)
{
    int n = (int)s.size();  // получаем длину строки
    vector<int> p(n, 0);    // создаем вектор для префикс-функции и заполняем нулями

    for (int i = 1; i < n; i++)  // начинаем с 1, так как для 0 элемента префикс-функция всегда 0
    {
        int j = p[i - 1];  // берем значение префикс-функции для предыдущего элемента

        while (s[i] != s[j] && j > 0)  // пока символы не совпадают и j > 0
            j = p[j - 1];              // обновляем j используя предыдущие значения префикс-функции

        if (s[i] == s[j])  // если символы совпали
            p[i] = j + 1;   // увеличиваем значение префикс-функции
    }

    return p;  // возвращаем полученный вектор
}

// функция для вычисления z-функции строки
vector<int> z_function(string s)
{
    int n = (int)s.size();  // получаем длину строки
    vector<int> z(n, 0);    // создаем вектор для z-функции и заполняем нулями
    int l = 0, r = 0;       // инициализируем переменные для хранения границ z-блока

    for (int i = 1; i < n; i++)  // начинаем с 1, так как для 0 элемента z-функция равна длине строки
    {
        if (i <= r)                          // если i внутри текущего z-блока
            z[i] = min(r - i + 1, z[i - l]);  // берем минимальное значение
        while (i + z[i] < n && s[z[i]] == s[i + z[i]])  // пока символы совпадают
            z[i]++;                                     // увеличиваем значение z-функции

        if (i + z[i] - 1 > r)  // если вышли за границы текущего z-блока
        { 
            r = i + z[i] - 1;  // обновляем правую границу
            l = i;               // обновляем левую границу
        }
    }
    z[0] = n;  // для 0 элемента z-функция равна длине строки

    return z;  // возвращаем полученный вектор
}

int main()
{
    string s;
    cout << "Введите строку: ";
    getline(cin, s);

    vector<int> prefix = prefix_function(s);  // вычисляем префикс-функцию
    vector<int> z = z_function(s);            // вычисляем z-функцию

    cout << "Префикс-функция: ";
    for (int val : prefix)
        cout << val << " ";
    cout << "\n";

    cout << "Z-функция: ";
    for (int val : z)
        cout << val << " ";
    cout << "\n";

    return 0;
}